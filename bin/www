#!/usr/bin/env node

/**
 * Container for modules that are used throughout the project
 */
 
MODULES = {};

/**
 * Module dependencies.
 */
app = require('../app');
var debug = require('debug')('oisumida:server');
var https = require('https');
const fs = require('fs');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

// This line is from the Node.js HTTPS documentation.
var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/oisumida.phari.solutions-0001/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/oisumida.phari.solutions-0001/cert.pem')
};

/**
 * Create HTTPS server.
 */
var server = https.createServer(options, app);

/**
 * Database
 */
require('../routes/database');

/**
 * Sockets
 */
MODULES.io = require('socket.io').listen(server);
require('../routes/sockets');

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, 'oisumida.phari.solutions');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
